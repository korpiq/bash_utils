#!/bin/bash

version_control_info_from_full_dirname () {
    local glob_match
    for glob_match in "$1"/.{hg,git}
    do
        if [ -d "$glob_match" ]
        then
            [ -n "$root" ] && echo "$1"
            [ -n "$system" ] && echo "${glob_match/*.}"
            return 0
        fi
    done
    [ "$1" = "/" ] && return 1
    version_control_info_from_full_dirname "$(dirname "$1")"
}

version_control_info () {
    version_control_info_from_full_dirname "$(cd -- "$1"; pwd)"
}

version_control_system() {
    local system=1 root=
    version_control_info "${1:-$PWD}"
}

get_github_repo_url() {
    git remote -v | perl -wne '
        m{\bgit\@([^:/]*?)[:/](.*?)\.git } and print "https://$1/$2\n" and exit 0
    '
}

git_faff() {
    git fetch --all;
    git branch --format '%(refname) %(upstream)' |
        sed -ne 's!^refs/heads/\([^ ]*\) refs/remotes/\([^/]*\)/\(.*\)!\1 \2 \3!p' |
        grep -v "^$(git branch | sed -ne 's/^\* //p') " |
        while read LOCAL_BRANCH REMOTE REMOTE_BRANCH
        do 
        if ! (
            set -x;
            git fetch $REMOTE $REMOTE_BRANCH:$LOCAL_BRANCH
        )
        then
            [ "$1" = "--delete-missing" ] && git branch -d $LOCAL_BRANCH
        fi
        done
}

version_control_subcommand_expand () {
    local system="$1"
    local subcommand="${2:-status}"
    shift 2
    case "$subcommand" in
        pl|l) echo $system pull
           ;;
        ps|s) echo $system push
           ;;
        commit|ci|i) echo $system commit $( [ "${1/^-/}" = "$*" ] && echo -m ) # 1 arg not -option = message
           ;;
        co|o) echo $system checkout
           ;;
        st) echo $system status
           ;;
        am) echo $system commit --amend
           ;;
        a) echo $system add
           ;;
        b) echo $system branch
           ;;
        d) echo $system diff
           ;;
        f) case "$system" in
                git)
                   echo 'git_faff'
                ;;
                *) echo "fetch all fast-forward is not necessary beyond git" >&2; return 1
                ;;
           esac
           ;;
        w) case "$system" in
                git) echo open $(get_github_repo_url) 
                ;;
                *) echo "Not known how to spot remote url in $system" >&2; return 1
                ;;
           esac
           ;;
        r) case "$system" in
                git) echo $system checkout -- $(git status | perl -wne 's/^\s+\w+:\s+// and print')
                ;;
                hg) echo $system revert --all
                ;;
                *) echo "Not known how to revert in $1" >&2; return 1
                ;;
           esac
           ;;
        FAIL) echo "Failing per user request" >&2; return 1
           ;;
        *) echo $system "$subcommand"
    esac
}

v () {
    local subcommand="$1" system=$(version_control_system) show_v=${show_v:+echo}
    [ -n "$subcommand" ] && shift
    if [ -n "$system" ]
    then
        $show_v $(version_control_subcommand_expand "$system" "$subcommand" "$@" || echo 'echo Failed to expand version control subcommand') "$@"
        return $?
    fi
    echo "No version control system here" >&2
    return 2
}

'+' () { v a "$@"; }

if [ "$0" = "$BASH_SOURCE" ]
then
    v "$@"
else
    true # ok to source functions
fi
